import numpy as np
from matplotlib import pyplot as plt

survey_responses = ['Ceballos', 'Kerrigan', 'Ceballos', 'Ceballos', 'Ceballos','Kerrigan', 'Kerrigan', 'Ceballos', 'Ceballos', 'Ceballos', 
'Kerrigan', 'Kerrigan', 'Ceballos', 'Ceballos', 'Kerrigan', 'Kerrigan', 'Ceballos', 'Ceballos', 'Kerrigan', 'Kerrigan', 'Kerrigan', 'Kerrigan', 'Kerrigan', 'Kerrigan', 'Ceballos', 'Ceballos', 'Ceballos', 'Ceballos', 'Ceballos', 'Ceballos',
'Kerrigan', 'Kerrigan', 'Ceballos', 'Ceballos', 'Ceballos', 'Kerrigan', 'Kerrigan', 'Ceballos', 'Ceballos', 'Kerrigan', 'Kerrigan', 'Ceballos', 'Ceballos', 'Kerrigan', 'Kerrigan', 'Kerrigan', 'Kerrigan', 'Kerrigan', 'Kerrigan', 'Ceballos',
'Kerrigan', 'Kerrigan', 'Ceballos', 'Ceballos', 'Ceballos', 'Kerrigan', 'Kerrigan', 'Ceballos', 'Ceballos', 'Kerrigan', 'Kerrigan', 'Ceballos', 'Ceballos', 'Kerrigan', 'Kerrigan', 'Kerrigan', 'Kerrigan', 'Kerrigan', 'Kerrigan', 'Ceballos']
#Total of Ceballos responses on the actual survey
total_ceballos = sum([1 for n in survey_responses if n == 'Ceballos'])
# print(total_ceballos)
#Total of responses
survey_length = float(len(survey_responses))
# print(survey_length)
#Percentage of Ceballos votes from the total surveyed
percentage_ceballos = 100 * total_ceballos/survey_length

#This is the vote percentage of Ceballos from surveyed people 
# print(percentage_ceballos)

#1st Simulation of possible results with the real outcome (probability of p=54% (result from the real election) in a size of 10k surveyed)
possible_surveys = np.random.binomial(survey_length, 0.54, size =10000)/survey_length
# print(possible_surveys)
#Histogram plot of the possible_surveys from 0 to 1 in 20 divisions
plt.hist(possible_surveys, range=(0, 1), bins=20)
plt.show()

#From the simulated outcome we'll check the percentage of people that got the incorrect results from the total of possible surveys. I did a test trying to prove this version from the video tutorial version and its the same.
ceballos_loss_surveys = float(np.mean(possible_surveys < 0.5))
print(ceballos_loss_surveys)

large_survey = np.random.binomial(float(7000), 0.54, size= 10000)/float(7000)
# print('\n')
print(large_survey)
ceballos_loss_new = np.mean(large_survey < 0.5)
print(ceballos_loss_new)